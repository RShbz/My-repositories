package com.demiroren.service.business;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Optional;
import java.util.Set;

import org.modelmapper.ModelMapper;
import org.springframework.stereotype.Service;

import com.demiroren.dto.request.AddContactRequest;
import com.demiroren.dto.response.AddContactResponse;
import com.demiroren.entity.Contact;
import com.demiroren.entity.Phone;
import com.demiroren.repository.ContactRepository;
import com.demiroren.repository.PhoneRepository;
import com.demiroren.service.ContactService;

/**
 * @author Remzi ÅžAHBAZ
 *
 */
@Service
public class StandartContactService implements ContactService {

	private ModelMapper modelmapper;
	private ContactRepository contactRepository;
	private PhoneRepository phoneRepository;

	/**
	 * @param modelmapper
	 * @param contactRepository
	 * @param phoneRepository
	 */
	public StandartContactService(ModelMapper modelmapper, ContactRepository contactRepository,
			PhoneRepository phoneRepository) {
		this.modelmapper = modelmapper;
		this.contactRepository = contactRepository;
		this.phoneRepository = phoneRepository;
	}

	@Override
	public Optional<AddContactResponse> addContact(AddContactRequest request) {

		var existContact = contactRepository.findByNameAndLastname(request.getName(), request.getLastName());

		if (existContact != null) {

			
			boolean existPhone;
			existContact.get().getPhone().stream().map(p -> {
				
						if(p.getValue()==request.getPhone()) {
							existPhone=true;							
						}
						return null;
			});
			if(!existPhone) {
				var phone= new Phone();
				phone.setValue(request.getPhone());
				Set<Phone> newPhones= new HashSet<Phone>();
				//old phones
				newPhones.addAll(existContact.get().getPhone());
				//new phone
				newPhones.add(phone);
				
				existContact.get().setPhone(newPhones);
				
				return Optional.of(modelmapper.map(existContact, AddContactResponse.class));
			}


		}

		else {
			try {
				var newContact = contactRepository.save(modelmapper.map(request, Contact.class));

				System.out.println(modelmapper.map(newContact, AddContactResponse.class));
				return modelmapper.map(newContact, AddContactResponse.class);

			} catch (Exception e) {
				throw new IllegalAccessError();
			}
		}

	}

	@Override
	public AddContactResponse getContact(String name, String lastName) {
		var getContact = contactRepository.findByNameAndLastName(name, lastName);
		if (getContact != null) {

			return modelmapper.map(getContact, AddContactResponse.class);

		}
		return null;
	}

}
